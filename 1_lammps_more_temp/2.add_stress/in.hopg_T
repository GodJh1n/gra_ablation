# ======================= Global Settings =======================
processors     8 8 1 
units          real
atom_style     charge
boundary       p p f
dimension      3

# ---------------- User parameters ----------------
variable T equal 500.0      # K
variable vin_kms     equal 8.0         # km/s
variable sigma_GPa   equal 0.0
variable Tdamp       equal 100.0       # fs
variable slab_th     equal 2.0         # Å

# --- Automatic Unit Conversions ---
variable vin_Afs     equal ${vin_kms}*0.01   # Å/fs
variable Fz          equal ${sigma_GPa}*1.439326e-4  # GPa→kcal/mol Å⁻³

# =================== Build box & atoms ===================
region	    box block 0.0 62.35382907247957 0.0 64.800000000000011 0.0 310.05000000000001
create_box  2 box
read_data   hopg_init.data add append
mass 1 12.011 # C
mass 2 16.000 # O

# ============ reaxff & QEq =============
pair_style  reaxff NULL safezone 3.0 mincap 5000
pair_coeff  * * ffield.reax.cho C O
fix         qeq all qeq/reax 1 0.0 10.0 1e-6 param.qeq 

# ---------- Neighbor list AFTER pair_style ----------
neighbor     2.0 bin
neigh_modify every 1 delay 0 check yes

# ========== Groups: bottom fixed, mobile ==========
group	fixed_layer id <= 1500
group   mobile subtract all fixed_layer
fix     hold fixed_layer setforce 0.0 0.0 0.0
velocity fixed_layer set 0.0 0.0 0.0 units box

# ============== Initial NVT relaxation ==============
velocity mobile create ${T} 12345 mom yes rot yes dist gaussian
fix      relax mobile nvt temp ${T} ${T} ${Tdamp}
timestep 0.1

# --- Dump for relaxation phase ---
dump        relax_dump all xyz 10000 relaxation_${T}.xyz
dump_modify relax_dump element C O

# --- Run the relaxation ---
run      50000  # 5 ps test run

# --- Clean up after relaxation ---
unfix    relax
undump   relax_dump
reset_timestep 0

# ================ Production integrator (NVE) ================
fix integrator all nve

# ---------------- Temperatures and logging ----------------
# Global temperature (includes deposits); DOF changes over time
compute  Tall all temp
compute_modify Tall dynamic/dof yes

# Substrate temperature (carbon only)
group    carbon type 1
group    carbon_mob subtract carbon fixed_layer
compute  Tsub carbon_mob temp
compute_modify Tsub dynamic/dof yes

# Beam/gas temperature (deposited O atoms only; see deposit group below)
group    obeam empty
compute  Tbeam obeam temp
compute_modify Tbeam dynamic/dof yes

# Print all three temps in thermo
thermo_style  custom step temp c_Tsub c_Tbeam c_Tall pe ke etotal atoms
thermo		100
thermo_modify temp Tall

# Optional: also write a time series to file (every 1000 steps)
fix     Tlog all ave/time 1 1000 1000 c_Tsub c_Tbeam c_Tall file temps.out

# -------- Dynamic top‑layer stress --------
#compute  zcoord mobile property/atom z
#compute  maxz   mobile reduce max c_zcoord
#variable is_top atom "c_zcoord > (c_maxz - v_slab_th)"
#group    stress_region dynamic mobile var is_top every 100
#fix      addstress stress_region addforce 0.0 0.0 0.0  #handon

# ----------------- Reflective walls -----------------
fix wall_bottom all wall/reflect zlo EDGE
fix wall_top    all wall/reflect zhi EDGE

# ---------------- O Atom Injection (Corrected) ----------------
region	inject_slab block 0.0 62.35382907247957 0.0 64.800000000000011 40 60 side in units box
fix dep obeam deposit 1500 2 1000 48174 region inject_slab near 1.5 attempt 50 vz -0.0776 -0.0776 units box
fix	spe all reaxff/species 1 2 20 species.out  element C O

# ---------------- Diagnostics & output ----------------
# 1. stress
compute MyStress all stress/atom NULL

# 2. ke
compute MyKE all ke/atom

# 3. kb;real：kcal/mol/K
variable kB equal 0.0019872041

# 4. temp/atom
variable MyTemp atom c_MyKE/(1.5*v_kB)

compute     MyVoro all voronoi/atom

# 2a. Kcal/mole to Joules (J)
# variable    Kcal2J equal 4184.0            # 1 Kcal = 4184 Joules
# variable    Na     equal 6.02214e23        # 阿伏伽德罗常数

# 2b. atmospheres (atm) to Gigapascals (GPa)
variable    Atm2GPa equal 0.000101325      # 1 atm = 0.000101325 GPa

# 3a. Kcal/mole to Joules
#    Joules = (Kcal/mole) * (J/Kcal) / (atoms/mole)
# variable    ke_J atom c_MyKE*v_Kcal2J/v_Na

# 3b. atm*Å³ to GPa
#  GPa = ( (atm*Å³ / Å³) * (GPa/atm) )
variable    s_xx_gpa atom c_MyStress[1]/c_MyVoro[1]*v_Atm2GPa
variable    s_yy_gpa atom c_MyStress[2]/c_MyVoro[1]*v_Atm2GPa
variable    s_zz_gpa atom c_MyStress[3]/c_MyVoro[1]*v_Atm2GPa
variable    s_xy_gpa atom c_MyStress[4]/c_MyVoro[1]*v_Atm2GPa
variable    s_xz_gpa atom c_MyStress[5]/c_MyVoro[1]*v_Atm2GPa
variable    s_yz_gpa atom c_MyStress[6]/c_MyVoro[1]*v_Atm2GPa

# 5. 输出所有逐原子信息到轨迹文件
dump        1 all custom 100 trajectory.T_${T}_v${vin_kms}.lammpstrj id type x y z vx vy vz c_MyKE v_MyTemp v_s_xx_gpa v_s_yy_gpa v_s_zz_gpa v_s_xy_gpa v_s_xz_gpa v_s_yz_gpa
restart         200000 restart.temp

# For short test runs, you may want to comment out file I/O you don't need
# fix bonds   all reaxff/bonds 100 bonds.test.txt
# fix species all reaxff/species 100 100 1000 species.test.out element C O
# restart     2000 restart.test.bin

# ---------------- Main run for testing ----------------
timestep 0.1
run      1000000    # 500 ps run
